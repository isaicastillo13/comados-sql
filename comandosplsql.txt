DECLARE 
cadena1 VARCHAR2 (20) := 'Hola mundo';  
fecha_hoy DATE := SYSDATE; 
pi CONSTANT NUMBER := 3.14159265359;  
BEGIN DBMS_OUTPUT.PUT_LINE (cadena1); 
DBMS_OUTPUT.PUT_LINE (fecha_hoy); 
DBMS_OUTPUT.PUT_LINE (pi);  
END; / 

--EJERCICIO 5.2: Asignar valores a variables
DECLARE
cadena VARCHAR2 (20);
fecha_hoy DATE; 
fecha_mañana DATE; 
ultimo_del_mes DATE; 
BEGIN
cadena := 'Hola Isaias'; 
fecha_hoy := SYSDATE; 
fecha_mañana := SYSDATE + 1;
ultimo_del_mes := LAST_DAY(SYSDATE); 
DBMS_OUTPUT.PUT_LINE (cadena);
DBMS_OUTPUT.PUT_LINE (fecha_hoy); 
DBMS_OUTPUT.PUT_LINE (fecha_mañana); 
DBMS_OUTPUT.PUT_LINE (ultimo_del_mes);
 END;
/

--EJERCICIO 5.3: Usar bucles PL/SQL
DECLARE
bucle INTEGER := 2;
BEGIN
LOOP
DBMS_OUTPUT.PUT (bucle || ' ' );
bucle := bucle + 2;
EXIT WHEN bucle = 10;
END LOOP;
DBMS_OUTPUT.PUT_LINE('');
DBMS_OUTPUT.PUT_LINE ( 'Fin del Bucle' );
END;
/

--EJERCICIO 5.3.1: Usar bucles PL/SQL
DECLARE
bucle INTEGER := 0;
BEGIN
WHILE bucle < 10 LOOP
DBMS_OUTPUT.PUT (bucle || ' ');
bucle := bucle + 1;
END LOOP;
DBMS_OUTPUT.PUT_LINE('');
DBMS_OUTPUT.PUT_LINE ('Fin del Bucle.');
 END;
 /

----EJERCICIO 5.3.2: Usar bucles PL/SQL
BEGIN
<<primer_bucle>>
FOR bucle_1 IN 0..25 LOOP --Bucle1
DBMS_OUTPUT.PUT_LINE ('Bucle 1:' || bucle_1);
 DBMS_OUTPUT.PUT ('Bucle 2: ');
<<segundo_bucle>>
FOR bucle_2 IN REVERSE 1..5 LOOP DBMS_OUTPUT.PUT (bucle_2 || ' ');
EXIT segundo_bucle --salida del bucle 2
WHEN ((bucle_1 = 4) AND (bucle_2 = 5));
EXIT primer_bucle --salida del bucle 1
WHEN ((bucle_1 = 7) AND(bucle_2 = 4));
END LOOP segundo_bucle; --fina del bucle 2
DBMS_OUTPUT.PUT_LINE('');
DBMS_OUTPUT.PUT_LINE ('Final del Bucle 2.');
DBMS_OUTPUT.PUT_LINE ('___');
END LOOP primer_bucle; --fin del bucle 1
DBMS_OUTPUT.PUT_LINE('');
DBMS_OUTPUT.PUT_LINE ('Final del Bucle 2.');
END;
/

----EJERCICIO 5.3.1: Usar bucles PL/SQL
BEGIN
FOR i IN 1..20 LOOP
DBMS_OUTPUT.PUT (i || ' ');

IF ((i mod 3 = 0) AND (i mod 5 = 0)) THEN

DBMS_OUTPUT.PUT(':Multipo de 3 y 5');

ELSIF i mod 3 = 0 THEN

DBMS_OUTPUT.PUT(':Multiplo de 3' );
ELSIF i mod 5 = 0 THEN

DBMS_OUTPUT.PUT(':Multiplo de 5'); 
--ELSE
--DBMS_OUTPUT.PUT_LINE (i);
END IF;
DBMS_OUTPUT.PUT_LINE (' ');
END LOOP;
DBMS_OUTPUT.PUT_LINE(' ');
END;
/

--EJERCICIO 5.5: Usar el comando GOTO de PL/SQL
BEGIN
--set the loop to iterate 10 times
FOR i IN 1..10 LOOP
DBMS_OUTPUT.PUT (i  || ' '); 
IF i = 5 THEN
GOTO messagel;
END IF;
END LOOP;
DBMS_OUTPUT.PUT_LINE('Imprime todas la Iteraciones del Bucle. ');
<<messagel>>
DBMS_OUTPUT.PUT_LINE ('Immpre solo 5 iteraciones (Goto).');
END;

--EJERCICIO 5.6: Manipular datos de tablas con sentencias DML
DECLARE
nuevo_id INTEGER := 6;
descripcion VARCHAR2 (250) := 'Mouse';
BEGIN
INSERT INTO PARTS VALUES (nuevo_id,descripcion, 40, 1200, 500);
END;
/

--EJERCICIO 5.7: Asignar un valor a una variable con una consulta
DECLARE
descripcion VARCHAR2 (250);
BEGIN
SELECT description INTO descripcion
FROM parts
WHERE id = 3;
DBMS_OUTPUT.PUT_LINE('La Parte es: ' || descripcion);
END;
/

--EJERCICIO 5.8: Declarar y usar un procedimiento

DECLARE
--width NUMBER(2,0);

PROCEDURE procedimiento(width IN INTEGER, chr IN CHAR DEFAULT '-' ) IS

BEGIN
FOR i IN 1.. width LOOP
DBMS_OUTPUT.PUT (chr);
END LOOP;

DBMS_OUTPUT.PUT_LINE ('');
END procedimiento;

BEGIN
procedimiento(40,'*');                                                    --imprime una línea con 40 *s 
procedimiento(20,'=');                                                  --imprime una linea con 20 = s
procedimiento(10);                                                       --imprime una linea con 10
END;
/

--EJERCICIO 5.9: Declarar y usar una función

DECLARE
	tempTotal NUMBER;
	i NUMBER:=1;
	FUNCTION funcion (OrderId IN INTEGER) 
		RETURN NUMBER --tipo de retorno
		IS
		precioTotal NUMBER;
		tempTotal NUMBER;
		i NUMBER;

	BEGIN--cuerpo de la funcion
		SELECT SUM (items.quantity * parts.unitprice) INTO precioTotal FROM items , parts WHERE items.o_id = orderId AND items.p_id = parts.id GROUP BY items.o_id;

	RETURN precioTotal;--variables que tiene el retorno

	END funcion;--fin del cuerpo de la funcion

BEGIN--cuerpo del progarma
	while i < 6 LOOP
		DBMS_OUTPUT.PUT_LINE ('0rder '||i||' Total: '|| funcion (i));
		i:=i+1;
	END LOOP;

--temptotal := funcion(2);
--DBMS_OUTPUT.PUT_LINE ('Order 2 Total:' || tempTotal);
END;
/

--select items.quantity, parts.unitprice,items.o_id, items.p_id,parts.id   from items , parts where items.o_id = 2 AND items.p_id = parts.id
--EJERCICIO 5.11: Usar el atributo %TYPE
DECLARE
TYPE partRecord IS RECORD (
 Id parts.id%TYPE, 
description parts.description%TYPE, 
unitprice parts.unitprice%TYPE,
 onhand parts.onhand%TYPE, 
reorder parts.reorder%TYPE
);
selectedPart partRecord;
BEGIN
SELECT Id, description, unitprice , onhand, reorder INTO selectedPart 
FROM parts WHERE id = 3;
DBMS_OUTPUT.PUT_LINE('ID:' || selectedPart.id);
DBMS_OUTPUT.PUT_LINE('DESCRIPTION: '|| selectedPart.description);
DBMS_OUTPUT.PUT_LINE('UNIT PRICE: ' || selectedPart.unitprice);
DBMS_OUTPUT.PUT_LINE('CURRENTLY ONHAND: ' || selectedPart.onhand);
DBMS_OUTPUT.PUT_LINE('REORDER AT: '|| selectedPart.reorder);
 END;
/
--EJERCICIO 5.12: Usar el atributo %ROWTYPE
DECLARE
selectedPart parts%ROWTYPE;
BEGIN
SELECT id, description, unitprice , onhand, reorder INTO selectedPart 
FROM parts WHERE id = 3;
DBMS_OUTPUT.PUT_LINE ('ID: '|| selectedPart.id);
DBMS_OUTPUT.PUT_LINE ('DESCRIPTION: '|| selectedPart.description);
DBMS_OUTPUT.PUT_LINE ('UNIT PRICE: '|| selectedPart.unitprice);
DBMS_OUTPUT.PUT_LINE ('CURRENTLY ONHAND: '|| selectedpart.onhand);
DBMS_OUTPUT.PUT_LINE ('REORDER AT: '|| selectedPart.reorder); 
END;

--EJERCICIO 5.13: Declarar y usar un cursor sencillo
DECLARE
    CURSOR c_cursor IS
    SELECT * FROM parts
    ORDER BY id;
    v_producto parts%ROWTYPE; 
BEGIN
    OPEN c_cursor;
        FETCH c_cursor INTO v_producto;
        WHILE c_cursor%FOUND LOOP 
            DBMS_OUTPUT.PUT_LINE (v_producto.id||'    ' ||v_producto.description);
            FETCH c_cursor INTO v_producto;
        END LOOP;
    CLOSE c_cursor;
END;
/

--EJERCICIO 5.14: Usar cursores para iniciar bucles FOR
DECLARE
    CURSOR c_cursor IS
    SELECT * FROM parts
    ORDER BY id;
BEGIN
    FOR v_producto IN c_cursor LOOP
        DBMS_OUTPUT.PUT_LINE(v_producto.id||'   ' ||v_producto.description); 
    END LOOP;
END;
/

DECLARE
    CURSOR c_cursor IS SELECT * FROM parts WHERE id = 1;
BEGIN
    FOR v_producto IN c_cursor LOOP 
        DBMS_OUTPUT.PUT_LINE(v_producto.id || ' - ' || v_producto.description ||' - '||v_producto.unitprice || '$');
    END LOOP;
END;
/

--EJERCICIO 5.15: Declarar cursores con parámetros
DECLARE
    CURSOR c_cursor (v_id INTEGER) IS
    SELECT id,email,phone,firstname || ' ' || lastname AS name FROM customers WHERE s_id = v_id;

BEGIN
    DBMS_OUTPUT.PUT_LINE ('Sales Rep #1 Customers');
    FOR v_cliente IN c_cursor (1)LOOP
        DBMS_OUTPUT.PUT_LINE(' ID: ' || v_cliente.id ||' | Nombre del cliente:  ' || v_cliente.name ||' | Correo electronico: '|| v_cliente.email ||' | Celular: '||v_cliente.phone);
    END LOOP;
END;
/

DECLARE
    CURSOR c_cursor (v_id INTEGER) IS SELECT * FROM customers where id = v_id;
BEGIN
    FOR I IN 1...10 LOOP
        FOR v_cliente IN c_cursor (i) LOOP
            DBMS_OUTPUT.PUT_LINE(i||'). Nombre del Cliente: ' || v_cliente.firstname);
        END LOOP;
    END LOOP;
    
END;
/

--EJERCICIO 5.16: Manipular la fila actual de un cursor
DECLARE
    CURSOR c_cursor (v_id INTEGER) IS SELECT *  FROM parts WHERE ID >= v_id FOR UPDATE;
BEGIN
    FOR producto IN c_cursor (6) LOOP --partes seleccionadas 6 y 7
        DELETE FROM parts
        WHERE CURRENT OF c_cursor;
        DBMS_OUTPUT.PUT_LINE('Parte Eliminada: ' ||  producto.id || ', ' ||producto.description);
    END LOOP;
END;
/

--EJERCICIO 5.17: Declarar e inicializar una tabla anidada
DECLARE
--	declarar el tipo de Tabla anidada de INTEGERS 
TYPE integerTable IS TABLE OF INTEGER;	
--	declarar e inicializar una coleccion con su constructor 
        tempIntegers integerTable := integerTable (1, 202, 451);
BEGIN
FOR i IN 1..3 LOOP
DBMS_OUTPUT.PUT_LINE('Elemt #' || i || ' is' || tempIntegers (i));
 END LOOP;
END;

--EJERCICIO 5.18: Usar métodos de colección con una tabla anidada 
DECLARE
    TYPE tabla_part IS TABLE OF parts%ROWTYPE;
        c_constructor tabla_part := tabla_part ();
    CURSOR c_parte IS
        SELECT * FROM parts ORDER BY id; 
        elemento INTEGER;
BEGIN
    c_constructor.EXTEND(10);
    
    FOR parte_a IN c_parte LOOP
        c_constructor(c_parte%RowCOUNT*2) := parte_a;
    END LOOP;

    DBMS_OUTPUT.PUT_LINE ('La tablas anidada tiene ' ||c_constructor.COUNT||' espacios');
    elemento := c_constructor.FIRST;
    FOR i IN 1 .. c_constructor.COUNT LOOP
        DBMS_OUTPUT.PUT('Articulo #' || elemento); 
        IF c_constructor(elemento).id IS NULL THEN 
            DBMS_OUTPUT.PUT_LINE(' no se guardo nada aquí' );
        ELSE
            DBMS_OUTPUT.PUT_LINE(' ID: '|| c_constructor(elemento).id||' | ' ||  ' DESCRIPTION: ' || c_constructor (elemento).description) ;
        END IF;
        elemento := c_constructor.NEXT(elemento);
    END LOOP;

    FOR i IN 1 .. c_constructor.COUNT LOOP
        IF c_constructor(i).id IS NULL THEN
            c_constructor.DELETE (i);
        END IF;
    END LOOP;

    DBMS_OUTPUT.PUT_LINE('Se eliminaron los espacios vacios de la tabla anidada solo quedaron ' ||c_constructor.COUNT ||' espacios disponibles');
    elemento := c_constructor.FIRST;
    FOR i IN 1 .. c_constructor.COUNT LOOP
        DBMS_OUTPUT.PUT_LINE('Articulo #' || elemento);
        IF c_constructor(elemento).id IS NULL THEN
            DBMS_OUTPUT.PUT_LINE(' Sin Resultado' );
        ELSE
            DBMS_OUTPUT.PUT_LINE(' ID: '||c_constructor(elemento). id||' | ' || ' Descripcion: '|| c_constructor (elemento) .description);
        END IF;
        elemento := c_constructor.NEXT(elemento); 
    END LOOP;
END;
/
--EJERCICIO 5.19: Manejar las excepciones predefinidas
DECLARE
    PROCEDURE p_procedimiento (v_fecha IN DATE) IS
        v_id INTEGER;
    BEGIN
        SELECT id INTO v_id FROM orders WHERE orderdate= v_fecha;
        --SELECT * FROM orders
        DBMS_OUTPUT.PUT_LINE('ID: '|| v_id || ' fecha de la orden: ' || v_fecha);
    EXCEPTION
        WHEN no_data_found THEN DBMS_OUTPUT.PUT_LINE('No hay valores para este select');
    END p_procedimiento;
BEGIN
    p_procedimiento (to_date('23-JUN-99','dd-mon-RRRR'));
    p_procedimiento (to_date('20-JUN-99','dd-mon-RRRR'));
    p_procedimiento (to_date('19-JUN-99','dd-mon-RRRR')); 
    p_procedimiento (to_date('22-JUN-99','dd-mon-RRRR'));
EXCEPTION
WHEN too_many_rows THEN
    DBMS_OUTPUT.PUT_LINE('se han encontrado muchas lineas' ); 
END;
/

/*EJERCICIO 5.20: Declarar y controlar las excepciones definidas por el usuario
(Material de Laboratorio, los estudiantes deben explicar lo que ocurre y sugerir modificaciones)*/
DECLARE
    v_id INTEGER :=1;
    errorNumero INTEGER; 
    errorMensaje VARCHAR2 (2000);
    invalido  EXCEPTION;
BEGIN
    UPDATE parts
    --Select * from parts
    SET description = 'Test'
    WHERE id = v_id;
    --Comprobar explícitamente la excepción definida por el usuario
    IF SQL%NOTFOUND THEN
    RAISE invalido;
    END IF;
        DBMS_OUTPUT.PUT_LINE ('¡Actualizado!');
EXCEPTION
    WHEN invalido THEN
        raise_application_error (-20003, 'Invalido ID ' || v_id || ' No existe en la Tabla');
    WHEN OTHERS THEN
    errorNumero := SQLCODE;
    errorMensaje := SUBSTR(SQLERRM, 1, 100);
    raise_application_error(-20000, errorNumero || ' ' || errorMensaje);
 END;
/

--EJERCICIO 5.21: Crear y usar procedimientos almacenados
CREATE OR REPLACE PROCEDURE procedimiento(v_cantidadRep IN INTEGER,chr IN CHAR DEFAULT '_')
    AUTHID DEFINER
    IS
BEGIN
    FOR i IN 1 .. v_cantidadRep LOOP
    DBMS_OUTPUT. PUT (chr);
    END LOOP;
    DBMS_OUTPUT.PUT_LINE ('');
END procedimiento;

BEGIN
    procedimiento(40, '*');
    procedimiento(20,'='); 
    procedimiento(10);
END;
/

--EJERCICIO 5.22: Crear y usar funciones almacenadas
CREATE OR REPLACE FUNCTION funcion (v_id IN INTEGER)
    RETURN NUMBER
    IS
    funcion NUMBER;
    v_total NUMBER;
BEGIN
    SELECT SUM (i.quantity * p.unitprice) INTO funcion FROM items I, parts p WHERE i.o_id = v_id AND i.p_id = p.id GROUP BY i.o_id;
RETURN funcion;
END funcion;
/

SELECT id,orderdate FROM orders
WHERE funcion(id) > 5000;

--EJERCICIO 5.23: Declarar y usar paquetes 
CREATE OR REPLACE PACKAGE partMgmt IS
-- Subprogramas públicos
PROCEDURE insertPart (partRecord IN parts%ROWTYPE);
PROCEDURE updatePart (partRecord IN parts%ROWTYPE);
PROCEDURE deletepart (partId IN INTEGER);
PROCEDURE printPartsProcessed;
 END partMgmt;
//////////////////////////////////////////////
CREATE OR REPLACE PACKAGE BODY partMgmt AS
-- Variable global privada
rowsProcessed INTEGER := 0;
--Subprogramas públicos
PROCEDURE insertpart (partRecord IN parts%ROWTYPE) IS
BEGIN
INSERT INTO parts
VALUES (partRecord.id, partRecord.description,
partRecord.unitprice, partRecord.onhand,
partRecord.reorder);
rowsProcessed := rowsProcessed + 1;
END insertPart;
PROCEDURE updatePart (partRecord IN parts%ROWTYPE) IS
BEGIN
UPDATE parts
SET description = partRecord.description, 
     unitprice = partRecord.unitprice, 
     onhand = partRecord.onhand,
     reorder = partRecord.reorder
WHERE id = partRecord.id;
rowsProcessed := rowsProcessed + 1;
END updatePart;
PROCEDURE deletePart (partId IN INTEGER) IS
BEGIN
DELETE FROM parts
WHERE id = partId;
rowsProcessed := rowsProcessed + 1;
END deletePart;
PROCEDURE printPartsProcessed IS
BEGIN
DBMS_OUTPUT.PUT_LINE(
'Parts processed this session: ' ||  rowsProcessed);
END printPartsProcessed;
END partMgmt;
/

DECLARE
 newPart parts%ROWTYPE;
 BEGIN
newPart.id  := 6;
newPart.description:= 'Mouse';
newPart.unitprice := 49;
newPart.onhand := 1200;
newPart.reorder := 500;
partMgmt. insertPart (newpart);
END;
/
--Creacion del trigger
CREATE OR REPLACE TRIGGER t_trigger
    BEFORE INSERT OR UPDATE OR DELETE ON parts FOR EACH ROW
BEGIN
    INSERT INTO detailedpartslog VALUES (SYSDATE, USER,:new.id, :new.description, :new.unitprice,:new.onhand, :new.reorder,:old.id, :old.description, :old.unitprice,:old.onhand, :old.reorder);
END t_trigger;

--Muestra lo que introduje en la creacion del trigger
SELECT newid, newonhand, oldid, oldonhand FROM detailedpartslog;

--EJERCICIO 5.24: Crear y usar disparadores de bases de datos
CREATE OR REPLACE TRIGGER t_trigger
    AFTER INSERT OR UPDATE OR DELETE ON parts
DECLARE
    v_char CHAR(1);
BEGIN
    IF INSERTING THEN
        v_char := 'I';
    ELSIF UPDATING THEN
        v_char := 'U';
    ELSE
        v_char := 'D';
    END IF;
    INSERT INTO partsLog
    VALUES (SYSDATE, v_char, USER);
END t_trigger;
/
--DML para ver funcionamiento del trigger
INSERT INTO parts VALUES (10, 'MAC BOOK PRO', 49, 1200, 500);

UPDATE parts SET onhand = onhand + 10;

DELETE FROM parts WHERE id = 10;

SELECT * FROM partsLog;
SELECT * FROM parts;



---------------------------------------------------------------------
--EJERCICIO 5.19: Manejar las excepciones predefinidas
DECLARE
    PROCEDURE p_procedimiento (v_fecha IN DATE) IS
        v_id INTEGER;
    BEGIN
        SELECT id INTO v_id FROM orders WHERE orderdate= v_fecha;
        --SELECT * FROM orders
        DBMS_OUTPUT.PUT_LINE('ID: '|| v_id || ' fecha de la orden: ' || v_fecha);
    EXCEPTION
        WHEN no_data_found THEN DBMS_OUTPUT.PUT_LINE('No hay valores para este select');
    END p_procedimiento;
BEGIN
    p_procedimiento (to_date('23-JUN-99','dd-mon-RRRR'));
    p_procedimiento (to_date('20-JUN-99','dd-mon-RRRR'));
    p_procedimiento (to_date('19-JUN-99','dd-mon-RRRR')); 
    p_procedimiento (to_date('22-JUN-99','dd-mon-RRRR'));
EXCEPTION
WHEN too_many_rows THEN
    DBMS_OUTPUT.PUT_LINE('se han encontrado muchas lineas' ); 
END;
/

/*EJERCICIO 5.20: Declarar y controlar las excepciones definidas por el usuario
(Material de Laboratorio, los estudiantes deben explicar lo que ocurre y sugerir modificaciones)*/
DECLARE
    v_id INTEGER :=1;
    errorNumero INTEGER; 
    errorMensaje VARCHAR2 (2000);
    invalido  EXCEPTION;
BEGIN
    UPDATE parts
    --Select * from parts
    SET description = 'Test'
    WHERE id = v_id;
    --Comprobar explícitamente la excepción definida por el usuario
    IF SQL%NOTFOUND THEN
    RAISE invalido;
    END IF;
        DBMS_OUTPUT.PUT_LINE ('¡Actualizado!');
EXCEPTION
    WHEN invalido THEN
        raise_application_error (-20003, 'Invalido ID ' || v_id || ' No existe en la Tabla');
    WHEN OTHERS THEN
    errorNumero := SQLCODE;
    errorMensaje := SUBSTR(SQLERRM, 1, 100);
    raise_application_error(-20000, errorNumero || ' ' || errorMensaje);
 END;
/

--EJERCICIO 5.21: Crear y usar procedimientos almacenados
CREATE OR REPLACE PROCEDURE procedimiento(v_cantidadRep IN INTEGER,chr IN CHAR DEFAULT '_')
    AUTHID DEFINER
    IS
BEGIN
    FOR i IN 1 .. v_cantidadRep LOOP
    DBMS_OUTPUT. PUT (chr);
    END LOOP;
    DBMS_OUTPUT.PUT_LINE ('');
END procedimiento;

BEGIN
    procedimiento(40, '*');
    procedimiento(20,'='); 
    procedimiento(10);
END;
/

--EJERCICIO 5.22: Crear y usar funciones almacenadas
CREATE OR REPLACE FUNCTION funcion (v_id IN INTEGER)
    RETURN NUMBER
    IS
    funcion NUMBER;
    v_total NUMBER;
BEGIN
    SELECT SUM (i.quantity * p.unitprice) INTO funcion FROM items I, parts p WHERE i.o_id = v_id AND i.p_id = p.id GROUP BY i.o_id;
RETURN funcion;
END funcion;
/

SELECT id,orderdate FROM orders
WHERE funcion(id) > 5000;

--EJERCICIO 5.23: Declarar y usar paquetes 
CREATE OR REPLACE PACKAGE partMgmt IS
-- Subprogramas públicos
PROCEDURE insertPart (partRecord IN parts%ROWTYPE);
PROCEDURE updatePart (partRecord IN parts%ROWTYPE);
PROCEDURE deletepart (partId IN INTEGER);
PROCEDURE printPartsProcessed;
 END partMgmt;
//////////////////////////////////////////////
CREATE OR REPLACE PACKAGE BODY partMgmt AS
-- Variable global privada
rowsProcessed INTEGER := 0;
--Subprogramas públicos
PROCEDURE insertpart (partRecord IN parts%ROWTYPE) IS
BEGIN
INSERT INTO parts
VALUES (partRecord.id, partRecord.description,
partRecord.unitprice, partRecord.onhand,
partRecord.reorder);
rowsProcessed := rowsProcessed + 1;
END insertPart;
PROCEDURE updatePart (partRecord IN parts%ROWTYPE) IS
BEGIN
UPDATE parts
SET description = partRecord.description, 
     unitprice = partRecord.unitprice, 
     onhand = partRecord.onhand,
     reorder = partRecord.reorder
WHERE id = partRecord.id;
rowsProcessed := rowsProcessed + 1;
END updatePart;
PROCEDURE deletePart (partId IN INTEGER) IS
BEGIN
DELETE FROM parts
WHERE id = partId;
rowsProcessed := rowsProcessed + 1;
END deletePart;
PROCEDURE printPartsProcessed IS
BEGIN
DBMS_OUTPUT.PUT_LINE(
'Parts processed this session: ' ||  rowsProcessed);
END printPartsProcessed;
END partMgmt;
/

DECLARE
 newPart parts%ROWTYPE;
 BEGIN
newPart.id  := 6;
newPart.description:= 'Mouse';
newPart.unitprice := 49;
newPart.onhand := 1200;
newPart.reorder := 500;
partMgmt. insertPart (newpart);
END;
/
--Creacion del trigger
CREATE OR REPLACE TRIGGER t_trigger
    BEFORE INSERT OR UPDATE OR DELETE ON parts FOR EACH ROW
BEGIN
    INSERT INTO detailedpartslog VALUES (SYSDATE, USER,:new.id, :new.description, :new.unitprice,:new.onhand, :new.reorder,:old.id, :old.description, :old.unitprice,:old.onhand, :old.reorder);
END t_trigger;

--Muestra lo que introduje en la creacion del trigger
SELECT newid, newonhand, oldid, oldonhand FROM detailedpartslog;

--EJERCICIO 5.24: Crear y usar disparadores de bases de datos
CREATE OR REPLACE TRIGGER t_trigger
    AFTER INSERT OR UPDATE OR DELETE ON parts
DECLARE
    v_char CHAR(1);
BEGIN
    IF INSERTING THEN
        v_char := 'I';
    ELSIF UPDATING THEN
        v_char := 'U';
    ELSE
        v_char := 'D';
    END IF;
    INSERT INTO partsLog
    VALUES (SYSDATE, v_char, USER);
END t_trigger;
/
--DML para ver funcionamiento del trigger
INSERT INTO parts VALUES (10, 'MAC BOOK PRO', 49, 1200, 500);

UPDATE parts SET onhand = onhand + 10;

DELETE FROM parts WHERE id = 10;

SELECT * FROM partsLog;
SELECT * FROM parts;

-----------------------------LABORATORIO#1---------------------------------------------------------------------
DECLARE
    v_codigo NUMBER;
    v_final FLOAT := 0;
   v_numero_estudiante INTEGER;
    FUNCTION F_PROMEDIO_FINAL (numero_estudiante INTEGER, codigo_notas CHAR)
        RETURN NUMBER
        IS 
        p_parcial FLOAT;
        p_proyecto FLOAT;
        p_semetral FLOAT;
        p_lab_quiz FLOAT;
        p_portafolio FLOAT;
    BEGIN
        IF(codigo_notas ='PA') THEN
        SELECT SUM ((valor_nota/3)*0.33) INTO p_parcial  FROM NOTAS WHERE NUMERO = numero_estudiante AND CODIGO_NOTA = codigo_notas;
        v_final:= v_final + p_parcial;
    
        ELSIF(codigo_notas ='SE') THEN
        SELECT SUM ((valor_nota/1)*0.33) INTO p_parcial  FROM NOTAS WHERE NUMERO = numero_estudiante AND CODIGO_NOTA = codigo_notas;
        v_final:= v_final + p_parcial;

        ELSIF(codigo_notas ='PY') THEN
        SELECT SUM ((valor_nota/1)*0.19) INTO p_parcial  FROM NOTAS WHERE NUMERO = numero_estudiante AND CODIGO_NOTA = codigo_notas;
        v_final:= v_final + p_parcial;

        ELSIF(codigo_notas ='LQ') THEN
        SELECT ROUND(SUM ((valor_nota/6)*1),2) INTO p_parcial  FROM NOTAS WHERE NUMERO = numero_estudiante AND CODIGO_NOTA = codigo_notas;
        v_final:= v_final + p_parcial;

        ELSIF(codigo_notas ='PO') THEN
        SELECT SUM ((valor_nota/1)*1) INTO p_parcial  FROM NOTAS WHERE NUMERO = numero_estudiante AND CODIGO_NOTA = codigo_notas;
        v_final:= v_final + p_parcial;

        END IF;
       
        RETURN p_parcial;


    END F_PROMEDIO_FINAL;
BEGIN
    
    v_numero_estudiante:=1;

    DBMS_OUTPUT.PUT_LINE ('Ponderacion final de parciales: '|| F_PROMEDIO_FINAL (v_numero_estudiante,'PA'));
    DBMS_OUTPUT.PUT_LINE ('Ponderacion del semestral: '|| F_PROMEDIO_FINAL (v_numero_estudiante,'SE'));
    DBMS_OUTPUT.PUT_LINE ('Ponderacion del proyecto final: '|| F_PROMEDIO_FINAL (v_numero_estudiante,'PY'));
    DBMS_OUTPUT.PUT_LINE ('Ponderacion de Quiz y Laboratorios: '|| F_PROMEDIO_FINAL (v_numero_estudiante,'LQ'));
    DBMS_OUTPUT.PUT_LINE ('Ponderacion del portaforio: '|| F_PROMEDIO_FINAL (v_numero_estudiante,'PO'));
    DBMS_OUTPUT.PUT_LINE ('Promedio Final: '|| v_final);

END;
